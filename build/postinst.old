#!/bin/sh

ln -fs /opt/apps/kvas/files/bin/kvas /opt/bin/kvas
ln -fs /opt/apps/kvas/files/bin/kvas_debug /opt/bin/kvas_debug
ln -fs /opt/apps/kvas/files/bin/kvas_ipset /opt/bin/kvas_ipset
ln -fs /opt/apps/kvas/files/bin/kvas_dnsmasq /opt/bin/kvas_dnsmasq
ln -fs /opt/apps/kvas/files/bin/kvas_update /opt/bin/kvas_update
ln -fs /opt/apps/kvas/files/bin/kvas_adblock /opt/bin/kvas_adblock
ln -fs /opt/apps/kvas/files/bin/kvas_lib /opt/bin/kvas_lib
ln -fs /opt/apps/kvas/files/bin/kvas_main /opt/bin/kvas_main

. /opt/bin/kvas_lib
. /opt/bin/kvas_main

print_line
echo "Установка пакета КВАС™ [Kvas™] версия 1.0-beta_10"
print_line

OK="${GREEN}ГОТОВО${NOCL}"
FAIL="${RED}ПРОБЛЕМА${NOCL}"

#------------------------------------------------------
# IPSET + SHADOWSOCKS + DNSMASQ
#------------------------------------------------------
if [ -f /opt/bin/ss-redir ]; then
  if [ -n "$(/opt/etc/init.d/S22shadowsocks status | grep alive)" ]; then
    ready "Останавливаем сервис shadowsocks..."
    /opt/etc/init.d/S22shadowsocks stop &>/dev/null
    [ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"
  fi
  if [ -n "$(/opt/etc/init.d/S56dnsmasq status | grep alive)" ]; then
    ready "Останавливаем сервис dnsmasq..."
    /opt/etc/init.d/S22shadowsocks stop &>/dev/null
    /opt/etc/init.d/S56dnsmasq stop &>/dev/null
    [ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"
  fi
  del_ssr_setup=-1
  if [ -f "/opt/etc/shadowsocks.json" ]; then
    echo "Обнаружен предыдущий файл конфигурации shadowsocks."
    while true; do
      ready "${RED}Удалить файл конфигурации shadowsocks${NOCL} [Y/N]?"
      read -r ynq
      case ${ynq} in
        [Yy]* )
          del_ssr_setup=0
          break;;
        [NnQq]* )
          del_ssr_setup=1
          break;;
        * ) please_repeat
          ;;
      esac
    done
  fi
fi

if [ $del_ssr_setup = 0 ]; then

  ready "Удаляем файл конфигурации shadowsocks...   "
  mv "/opt/etc/shadowsocks.json" "/opt/etc/shadowsocks.json.old"  &>/dev/null
  [ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"

fi
if [ $del_ssr_setup -le 0 ]; then
  cp /opt/apps/kvas/files/etc/conf/shadowsocks.json "/opt/etc/shadowsocks.json"   &>/dev/null
  sed -i "s/@SSR_SERVER_IP/${SSR_SERVER_IP}/g;         s/@SSR_SERVER_PORT/${SSR_SERVER_PORT}/g;         s/@SSR_SERVER_PASSWD/${SSR_SERVER_PASSWD}/g;         s/@SSR_SERVER_CRYPT/${SSR_SERVER_CRYPT}/g"         "/opt/etc/shadowsocks.json"
fi
ready "Заменяем файл конфигурации dnsmasq...   "
if [ -f /opt/etc/dnsmasq.conf ]; then
  mv /opt/etc/dnsmasq.conf /opt/etc/dnsmasq.conf.old &>/dev/null
  mv /opt/sbin/dnsmasq /opt/sbin/dnsmasq.old

  bin_path="/opt/apps/kvas/files/sbin/dnsmasq"
  chmod -R +x "${bin_path}"

  arch=$(grep "arch" /opt/etc/entware_release | cut -f2 -d"=")
  case "$arch" in
      mips) cp ${bin_path}/mips /opt/sbin/dnsmasq ;;
      mipsel) cp ${bin_path}/mipsel /opt/sbin/dnsmasq ;;
      aarch64) cp ${bin_path}/aarch64 /opt/sbin/dnsmasq ;;
      *) echo "Неизвестная архитектура процессора: $arch !"; exit 1;;
  esac
fi
cp /opt/apps/kvas/files/etc/conf/dnsmasq.conf /opt/etc/dnsmasq.conf &>/dev/null
[ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"

ready "Заменяем файл со списком разблокировки...   "
if [ -f /opt/etc/kvas.list ]; then
  mv /opt/etc/kvas.list /opt/etc/kvas.list.old &>/dev/null
fi
cp /opt/apps/kvas/files/etc/conf/kvas.list /opt/etc/kvas.list &>/dev/null
cp /opt/apps/kvas/files/etc/conf/adblock.sources /opt/etc/adblock.sources &>/dev/null
[ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"

print_line
echo -e "${GREEN}Предыдущий файл конфигурации сохранен под именами:"
echo -e "/opt/etc/dnsmasq.conf.old${NOCL}"
# меняем данные в файлах shadowsocks
[ -n "$(grep "ss-redir" /opt/etc/init.d/S22shadowsocks)" ] && 	sed -i 's/ss-local/ss-redir/g' /opt/etc/init.d/S22shadowsocks

print_line

UPLEVEL_DNS=$(get_config_value DNS_DEFAULT)
PROXY_PORT=$(get_config_value SSR_DNS_PORT)
LOCAL_IP=$(ifconfig | grep "inet addr" | head -1 | cut -d: -f2 | cut -d' ' -f1)
INFACE=$(ip a | grep "${LOCAL_IP}" | sed 's/^ *//g' | cut -d' ' -f7- )

set_config_value DNSMASQ_LISTEN_IP "$LOCAL_IP"

[ -f "/opt/etc/shadowsocks.json" ] && 	sed -i "s/@PROXY_PORT/${PROXY_PORT}/g;" "/opt/etc/shadowsocks.json"

[ -f "/opt/etc/dnsmasq.conf" ] && 	sed -i "s/@LOCAL_IP/${LOCAL_IP}/g; 		s/@INFACE/${INFACE}/g; 		s/@UPLEVEL_DNS/${UPLEVEL_DNS}/g;" 		"/opt/etc/dnsmasq.conf"

[ -f "/opt/etc/ndm/netfilter.d/100-dns-local" ] && 	sed -i "s/@LOCAL_IP/${LOCAL_IP}/g; 		s/@INFACE/${INFACE}/g;" 	"/opt/etc/ndm/netfilter.d/100-dns-local"

[ -f "/opt/etc/ndm/netfilter.d/100-ipset-redirect" ] && 	sed -i "s/@PROXY_PORT/${PROXY_PORT}/g;         s/@INFACE/${INFACE}/g;"         "/opt/etc/ndm/netfilter.d/100-ipset-redirect"

[ -f "/opt/bin/kvas_dnsmasq" ] && 	sed -i "s/@UNBLOCK_LIST/\/opt\/etc\/kvas.list/g" "/opt/bin/kvas_dnsmasq"

[ -f "/opt/bin/kvas_ipset" ] && 	sed -i "s/@UNBLOCK_LIST/\/opt\/etc\/kvas.list/g" "/opt/bin/kvas_ipset"

ready "Ставим обновление ip адресов по умолчанию - каждые 12 часов..."
sed -i '/kvas_update/d' /opt/etc/crontab
echo '0 */12 * * * root /opt/bin/kvas_update' >> /opt/etc/crontab
[ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"

ynq=no
#------------------------------------------------------
# AdGuard Home
#------------------------------------------------------
if [ -f "/opt/etc/init.d/S99adguardhome" ]; then
	print_line
	warning "На роутере обнаружен AdGuard Home "
	while true; do
	  ready "${BLUE}Установить AdGuard Home в качестве DNS сервера ${NOCL} [Y/N]?"
	  read -r ynq
	  case "${ynq}" in
		[Yy]* )
			adguardhome_setup
			print_line
			break ;;
    	[NnqQ]* )
    		ynq=no;
      		break;;
    	* ) please_repeat ;;
	  esac
	done
fi
if [ "${ynq}" = no ]; then
	#------------------------------------------------------
	# DNSCRYPT-PROXY2
	#------------------------------------------------------
	crypt_port=$(get_config_value DNS_CRYPT_PORT)

	while true; do
	  ready "${BLUE}Установить шифрование DNS (dnscrypt-proxy2)${NOCL} [Y/N]?"
	  read -r ynq
	  case ${ynq} in
		[Yy]* )
		  if $(/opt/etc/init.d/S09dnscrypt-proxy2 status | grep alive &>/dev/null); then
			ready "Останавливаем службу dnscrypt-proxy2..."
			/opt/etc/init.d/S09dnscrypt-proxy2 stop &>/dev/null
			[ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"
		  fi

		  if [ -f '/opt/etc/dnscrypt-proxy.toml' ]; then
			print_line
			cp /opt/etc/dnscrypt-proxy.toml /opt/etc/dnscrypt-proxy.toml.old
			warning "Предыдущий файл конфигурации сохранен под именем"
			warning "/opt/etc/dnscrypt-proxy.toml.old"
			print_line
		  fi

		  ready "Настраиваем dnscrypt-proxy2..."
		  dns_crypt_on &>/dev/null
		  [ $? = 0 ] && echo -e "${OK}" || echo -e "${FAIL}"

		  break;;
		[NnQq]* )
		  break;;
		* ) please_repeat
		  ;;
	  esac
	done
	#------------------------------------------------------
	# Блокировка рекламы
	#------------------------------------------------------
	while true; do
	  ready "${BLUE}Установить блокировку рекламы${NOCL} [Y/N]?"
	  read -r ynq
	  case ${ynq} in
		[Yy]* )
		  ads_protect_on
		  break;;
		[NnQq]* )
		  print_line
		  break;;
		* ) please_repeat
		  ;;
	  esac
	done
fi

# Проверяем отключено ли использование DNS провайдера
dns_prov=$(curl -s 'localhost:79/rci/opkg/dns-override')

if [ ! "${dns_prov}" = true ]; then
    cli="$(get_router_host)/a"
#	print_line
	echo -e "${RED}Для корректной работы dnsmasq необходимо отключить использование DNS провайдера!"
	echo -e "С этой целью зайдите в админ панель роутера по адресу: ${GREEN}${cli}"
	echo -e "${RED}и введите в поле Command следующую команду ${GREEN}opkg dns-override ${RED}, затем нажмите ENTER."
	echo -e "далее в том же поле введите команду ${GREEN}system configuration save ${RED}, затем нажмите ENTER."
	echo -e "И третьим шагом необходимо перегрузить роутер, для этого в том же поле"
	echo -e "введите команду ${GREEN}system reboot ${RED}, затем нажмите ENTER.${NOCL}"
	exit 1
else
#	print_line
	echo "Сейчас необходимо выбрать VPN интерфейс для работы пакета"
  	interface_change

fi
#print_line
echo -e "Для общей справки наберите ${BLUE}kvas help${NOCL}"
print_line


while true; do
  ready "${BLUE}Запустить диагностику${NOCL} [Y/N]?"
  read -r ynq
  case ${ynq} in
    [Yy]* )
#      printf "\n"
      print_line
      state_checker
      break;;
    [NnQq]* )
      break;;
    * ) please_repeat
      ;;
  esac
done